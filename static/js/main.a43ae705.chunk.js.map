{"version":3,"sources":["components/AutoWidth/AutoWidth.js","components/Controls/SearchView.js","components/MultiSelect/MultiSelect.js","components/Controls/FilterView.js","components/Icons/Icons.js","components/HelpIcon/HelpIcon.js","components/Controls/DisplayView.js","utils/string.js","components/Controls/Controls.js","utils/collection.js","utils/object.js","components/SidebarPage/SidebarPage.js","components/NetworkView/layouts/curvedPath.js","components/NetworkView/layouts/draw.js","components/NetworkView/layouts/NetworkLayout.js","components/NetworkView/layouts/constants.js","components/NetworkView/layouts/ForceLayout.js","components/NetworkView/Network.js","components/tooltip/tooltip.js","components/App/App.js","serviceWorker.js","index.js"],"names":["AutoWidth","props","state","width","defaultRenderWidth","debounceTime","updateWidth","debounce","bind","this","window","addEventListener","parentMayResize","cancel","removeEventListener","ReactDOM","findDOMNode","domWidth","getResizeDOMNode","offsetWidth","setState","childToRender","child","children","React","cloneElement","className","Component","defaultProps","SearchView","handleSearchChange","renderOption","handleInputChange","nextProps","searchConfig","values","options","map","v","Object","assign","label","value","searchable","searchProps","p","id","indexStrategy","PrefixIndexStrategy","filterOptions","createFilterOptions","indexes","newValue","newVal","isEmpty","Array","d","currentInput","undefined","handleChange","val","opts","key","option","selectValue","focusOption","focusedOption","style","classNames","push","join","onClick","onMouseOver","search","name","onChange","noResultsText","placeholder","description","multi","optionRenderer","onInputChange","MultiSelect","handleAddMultiple","valueMap","forEach","newValues","split","trim","filteredNewValues","filter","nValue","length","console","log","addMultipleIds","disabled","makeOptions","selectComponent","Creatable","optionHeight","onNewOptionClick","promptTextCreator","PureComponent","allowMulti","FilterView","handleFilterChange","handleFilterClear","filterId","filterValue","filterVals","filters","htmlFor","focusNode","Boolean","filterConfigs","Button","variant","filterConfig","renderFilterTitle","renderFilterSelect","HelpIcon","icon","text","title","position","trigger","theme","Range","createSliderWithTooltip","Slider","Handle","handle","dragging","index","restProps","prefixCls","overlay","visible","placement","DisplayView","handleDisplayChange","handleDisplayClear","handleSelectAll","viewConfigs","c","config","currentValue","help","selectAll","range","min","max","default","step","d3","marks","reduce","memo","i","unit","reset","type","renderSlider","renderRange","renderTitle","renderDropDown","renderViewControl","capitalize","s","charAt","toUpperCase","slice","Controls","dataDefs","data","filterData","filterBy","filterDef","level","collection","propertyName","allValues","isArray","uniq","concat","isFinite","sort","uniqueValues","viewConfig","def","extractProperties","searchBy","desc","items","node","item","prop","updateConfigs","update","nextState","propKeys","keys","updated","k","ignoreIndex","indexOf","splice","noEmpty","removeEmptyKeys","obj","res","temp","onChangeFilters","onChangeSearch","propertyId","handler","error","controlsConfig","generateFilterConfig","generateSearchConfig","view","generateViewConfig","display","others","footer","shouldDisplayControls","controls","renderSearchView","renderDisplayView","renderFilterView","renderFooter","SidebarPage","sidebar","Col","xl","md","Container","fluid","Row","renderSidebar","renderMain","X","Y","lineLength","a","b","Math","sqrt","pow","curvedPath","start","end","amount","midRotatedPoint","deltaLength","pointOnLine","point","thetaRadians","origin","cos","sin","rotate","PI","startControlPoint","interpolateArray","endControlPoint","arrowSize","arrowPadding","edgeArrow","edge","sourceSize","targetSize","edgeSize","dx","target","x","source","dy","y","angle","atan2","offset","rotationDir","edgeIndex","fromX","fromY","toPad","hideArrow","toX","toY","path","curved","edgeType","arrowPath","angleOffset","endArrow","substr","NetworkLayout","ticked","ended","tickedCallback","endedCallback","callback","simulation","alphaTarget","restart","networkDisplay","nodeSelectColor","nodeHighlightColor","nodeSizeRange","edgeHighlightColor","edgeColor","edgeColorRange","edgeWidthRange","edgeExpandColor","nodeSize","legendDimColor","edgeDirColors","color","nodeShapes","Both","In","Out","None","ForceLayout","height","rScale","sizeBy","chargeMultiplier","alphaMin","velocityDecay","stop","linkForce","distance","force","strength","distanceMax","Infinity","xForce","totalEdges","yForce","setupForceSimulation","nodes","edges","on","links","alpha","r","find","Network","dragStarted","dragEnded","dragged","mouseover","mouseout","mouseoverEdge","mouseoutEdge","click","setup","restartLayout","tooltip","hideTooltip","el","raise","select","classed","layout","active","warm","subject","fx","fy","cool","cRoot","root","tooltipId","tt","append","attr","html","toNum","str","Number","replace","updatePosition","event","ttw","tth","wscrY","scrollY","wscrX","scrollX","curX","document","all","clientX","pageX","curY","clientY","pageY","ttleft","xOffset","innerWidth","tttop","yOffset","innerHeight","showTooltip","content","floatingTooltip","g","edgesG","nodesG","titlesG","showEdges","zoom","scaleExtent","transform","call","onTicked","onEnded","exit","underG","overG","tickedNodes","tickedEdges","tickedTitles","padding","left","top","updateLayout","updateNodes","updateEdges","render","nodeColor","nodeE","enter","remove","merge","edgeE","that","ref","graph","colorScale","compose","addComputedProps","right","bottom","plotWidth","plotHeight","FAKE_GRAPH","App","location","hostname","match","Route","component","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a43ae705.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash.debounce';\n\nconst propTypes = {\n  children: PropTypes.object,\n\n  /* The amount of delay between debounced calls (default: 100) */\n  debounceTime: PropTypes.number,\n\n  /* If set, the default width is set to this value and the child is\n     rendered. If null, the child is not rendered until a width is provided */\n  defaultRenderWidth: PropTypes.number,\n\n  /* If true, the component checks on componentDidUpdate to see if it needs to resize */\n  parentMayResize: PropTypes.bool,\n};\n\nconst defaultProps = {\n  parentMayResize: false,\n  defaultRenderWidth: null,\n  debounceTime: 100,\n};\n\n/**\n * Component for automatically setting a width prop to the DOM\n * node of the first child. Note that checking offsetWidth is a\n * somewhat expensive operation (forced reflow), so try and leave\n * `parentMayResize` false if you are having performance issues.\n *\n * Example usage:\n * <AutoWidth>\n *   <MyComponent />\n * </AutoWidth>\n *\n * MyComponent gets a `width` prop set.\n *\n */\nclass AutoWidth extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      width: props.defaultRenderWidth,\n    };\n\n    if (props.debounceTime) {\n      this.updateWidth = debounce(this.updateWidth.bind(this), props.debounceTime);\n    } else {\n      this.updateWidth = this.updateWidth.bind(this);\n    }\n  }\n\n  componentDidMount() {\n    this.updateWidth();\n    window.addEventListener('resize', this.updateWidth);\n  }\n\n  componentDidUpdate() {\n    const { parentMayResize } = this.props;\n\n    // have to update width of the parent can cause a resize without a window resize\n    // e.g. something collapses or expands.\n    if (parentMayResize) {\n      this.updateWidth();\n    }\n  }\n\n  componentWillUnmount() {\n    this.updateWidth.cancel();\n    window.removeEventListener('resize', this.updateWidth);\n  }\n\n  getResizeDOMNode() {\n    return ReactDOM.findDOMNode(this);\n  }\n\n  // Call set state to update the width so it starts an update of the child component\n  updateWidth() {\n    const { width } = this.state;\n    const domWidth = this.getResizeDOMNode().offsetWidth;\n    if (width !== domWidth) {\n      this.setState({\n        width: domWidth,\n      });\n    }\n  }\n\n  render() {\n    const { width } = this.state;\n\n    if (process.env.NODE_ENV !== 'production' && React.Children.count(this.props.children) > 1) {\n      console.warn('AutoWidth only works with a single child element.');\n    }\n\n    const child = this.props.children;\n    let childToRender;\n\n    // if we have a child and a width is provided, render the child with the width as a prop\n    if (child && width != null) {\n      childToRender = React.cloneElement(child, { width: this.state.width });\n    }\n\n    // we rely on this div getting the full width from the browser's layout\n    // and read its offsetWidth to set as the width to the child component.\n    return <div className=\"auto-width\">{childToRender}</div>;\n  }\n}\n\nAutoWidth.propTypes = propTypes;\nAutoWidth.defaultProps = defaultProps;\n\nexport default AutoWidth;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport VirtualizedSelect from 'react-virtualized-select';\nimport createFilterOptions from 'react-select-fast-filter-options';\nimport { PrefixIndexStrategy } from 'js-search';\nimport isEmpty from 'lodash.isempty';\n\nimport 'react-virtualized/styles.css';\nimport 'react-virtualized-select/styles.css';\n\nimport './SearchView.scss';\n\n/**\n * Helper to make options from app data\n */\nfunction makeOptions(values) {\n  return values.map(v => {\n    return Object.assign({}, v, {\n      label: v.label,\n      value: v.value,\n    });\n  });\n}\n\n/**\n * This view displays a control for searching for nodes in the network.\n */\nclass SearchView extends Component {\n  static propTypes = {\n    handleChange: PropTypes.func.isRequired,\n    search: PropTypes.array,\n    searchConfig: PropTypes.shape({\n      id: PropTypes.string,\n      label: PropTypes.string,\n      description: PropTypes.string,\n      values: PropTypes.arrayOf(\n        PropTypes.shape({\n          label: PropTypes.string,\n          value: PropTypes.string,\n        }),\n      ),\n    }),\n  };\n\n  static defaultProps = {\n    handleChange: () => {},\n    searchConfig: {},\n  };\n\n  constructor(props) {\n    super(props);\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n    this.renderOption = this.renderOption.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  componentWillUpdate(nextProps) {\n    // We only expect this to change once.\n    if (this.props.searchConfig.values !== nextProps.searchConfig.values) {\n      this.options = makeOptions(nextProps.searchConfig.values);\n\n      // We create a indexer that allows us to search for an application based on multiple\n      // properties.\n      const searchable = nextProps.searchConfig.searchProps.map(p => p.id);\n      const indexStrategy = new PrefixIndexStrategy();\n\n      this.filterOptions = createFilterOptions({\n        indexes: searchable,\n        options: this.options,\n        indexStrategy,\n      });\n    }\n  }\n\n  handleSearchChange(newValue) {\n    let newVal;\n    if (isEmpty(newValue)) {\n      newVal = [];\n    } else if (newValue instanceof Array) {\n      newVal = newValue.map(d => d.value);\n    }\n    this.currentInput = undefined;\n    this.props.handleChange(newVal);\n  }\n\n  handleInputChange(val) {\n    this.currentInput = val;\n  }\n\n  renderOption(opts) {\n    const { key, option, selectValue, focusOption, focusedOption, style } = opts;\n\n    const classNames = ['SearchOption'];\n    if (option === focusedOption) {\n      classNames.push('SearchOptionFocused');\n    }\n\n    return (\n      <div\n        className={classNames.join(' ')}\n        key={key}\n        onClick={() => selectValue(option)}\n        onMouseOver={() => focusOption(option)}\n        style={style}\n      >\n        {option.label}\n      </div>\n    );\n  }\n\n  render() {\n    const { search, searchConfig } = this.props;\n\n    const filterOptions = this.filterOptions;\n    const options = this.options;\n\n    return (\n      <div className=\"SearchView\">\n        <div className=\"section-head\">Search</div>\n\n        <div className=\"control-item\">\n          <VirtualizedSelect\n            name=\"app-search\"\n            options={options}\n            filterOptions={filterOptions}\n            value={search}\n            onChange={this.handleSearchChange}\n            noResultsText=\"No Results Found\"\n            placeholder={searchConfig.description}\n            multi\n            optionRenderer={this.renderOption}\n            onInputChange={this.handleInputChange}\n          />\n        </div>\n        <hr />\n      </div>\n    );\n  }\n}\n\nexport default SearchView;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport VirtualizedSelect from 'react-virtualized-select';\nimport Select from 'react-select';\nimport Creatable from 'react-select';\nimport isEmpty from 'lodash.isempty';\n\n/**\n * Helper to make options from filter data\n */\nfunction makeOptions(values) {\n  return values.map(v => {\n    return {\n      label: v.label,\n      value: v.value,\n    };\n  });\n}\n\nclass MultiSelect extends PureComponent {\n  static propTypes = {\n    allowMulti: PropTypes.bool,\n    description: PropTypes.string,\n    disabled: PropTypes.bool,\n    handleChange: PropTypes.func.isRequired,\n    id: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n    multi: PropTypes.bool,\n    placeholder: PropTypes.string,\n    value: PropTypes.any,\n    values: PropTypes.arrayOf(\n      PropTypes.shape({\n        label: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      }),\n    ),\n  };\n\n  static defaultProps = {\n    allowMulti: false,\n    handleChange: () => {},\n    multi: true,\n    values: [],\n    value: undefined,\n    id: '',\n    label: '',\n    disabled: false,\n  };\n\n  constructor() {\n    super();\n    this.handleChange = this.handleChange.bind(this);\n    this.handleAddMultiple = this.handleAddMultiple.bind(this);\n  }\n\n  handleChange(newValue) {\n    let newVal;\n    if (isEmpty(newValue)) {\n      newVal = undefined;\n    } else if (newValue instanceof Array) {\n      newVal = newValue.map(d => d.value);\n    } else {\n      newVal = newValue.value;\n    }\n\n    this.props.handleChange(this.props.id, newVal);\n  }\n\n  handleAddMultiple(option) {\n    const { values } = this.props;\n    const valueMap = {};\n    values.forEach(v => (valueMap[v.value] = v));\n    const newValues = option.value.split(';').map(v => v.trim());\n\n    // only allow values that exist in current values\n    const filteredNewValues = newValues.filter(nValue => valueMap[nValue]);\n\n    if (filteredNewValues.length > 0) {\n      this.props.handleChange(this.props.id, filteredNewValues);\n    } else {\n      console.log('no valid values to add in: ', newValues);\n    }\n  }\n\n  render() {\n    const { addMultipleIds, id, values, multi, placeholder, disabled, value } = this.props;\n\n    const options = makeOptions(values);\n    const selectComponent = addMultipleIds ? Creatable : Select;\n\n    return (\n      <div className=\"MultiSelect\">\n        <VirtualizedSelect\n          name={`multi-select-${id}`}\n          options={options}\n          optionHeight={44}\n          value={value}\n          onChange={this.handleChange}\n          multi={multi}\n          placeholder={placeholder}\n          disabled={disabled}\n          onNewOptionClick={this.handleAddMultiple}\n          selectComponent={selectComponent}\n          promptTextCreator={() => \"Add multiple values with ';'\"}\n        />\n      </div>\n    );\n  }\n}\n\nexport default MultiSelect;\n","import React, { PureComponent } from 'react';\nimport { Button } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nimport MultiSelect from '../MultiSelect/MultiSelect';\n\nimport './FilterView.scss';\n\n/**\n * This view displays and manages options for filtering the network view.\n */\nclass FilterView extends PureComponent {\n  static propTypes = {\n    filterConfigs: PropTypes.array,\n    filters: PropTypes.object,\n    handleChange: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    filters: {},\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.handleFilterChange = this.handleFilterChange.bind(this);\n    this.handleFilterClear = this.handleFilterClear.bind(this);\n  }\n\n  handleFilterClear() {\n    this.props.handleChange({});\n  }\n\n  handleFilterChange(filterId, filterValue) {\n    const filterVals = this.props.filters;\n    const newVal = Object.assign({}, filterVals, {\n      [filterId]: filterValue,\n    });\n    this.props.handleChange(newVal);\n  }\n\n  renderFilterTitle(filter) {\n    return (\n      <div className=\"toggle-area\">\n        <label htmlFor=\"toggle-links\">{filter.label}</label>\n      </div>\n    );\n  }\n\n  renderFilterSelect(filter) {\n    const { filters, focusNode } = this.props;\n\n    const disabled = Boolean(focusNode);\n\n    const filterId = filter.id;\n    let filterValue = filters[filterId];\n\n    return (\n      <MultiSelect\n        key={`filter-control-${filter.id}`}\n        id={filter.id}\n        label={filter.label}\n        addMultipleIds={filter.addMultipleIds}\n        description={filter.description}\n        values={filter.values}\n        value={filterValue}\n        handleChange={this.handleFilterChange}\n        disabled={disabled}\n      />\n    );\n  }\n\n  render() {\n    const { filterConfigs } = this.props;\n\n    return (\n      <div className=\"FilterView\">\n        <div className=\"title-area\">\n          <div className=\"section-head\">Filter</div>\n          <div className=\"clear-link\">\n            <Button variant=\"link\" onClick={this.handleFilterClear}>\n              clear\n            </Button>\n          </div>\n        </div>\n\n        {filterConfigs.map(filterConfig => {\n          return (\n            <div className=\"control-item\" key={`filter-control-${filterConfig.id}`}>\n              {this.renderFilterTitle(filterConfig)}\n              {this.renderFilterSelect(filterConfig)}\n            </div>\n          );\n        })}\n        <hr />\n      </div>\n    );\n  }\n}\n\nexport default FilterView;\n","import React from 'react';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport {\n  faQuestionCircle,\n  faExpandArrowsAlt,\n  faSearch,\n  faTable,\n  faFileDownload,\n  faChevronLeft,\n  faExternalLinkAlt,\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\n/**\n * Adds subset of Font Awesome fonts to Font Awesome library,\n * as described here:\n * https://github.com/FortAwesome/react-fontawesome#build-a-library-to-reference-icons-throughout-your-app-more-conveniently\n */\nexport function initLibrary() {\n  library.add(\n    faQuestionCircle,\n    faExpandArrowsAlt,\n    faSearch,\n    faTable,\n    faFileDownload,\n    faChevronLeft,\n    faExternalLinkAlt,\n  );\n}\n\n/*\n * Icons for application. Kept in one place to improve reuse\n * and avoid complications of upgrading / changing icon source.\n */\n\nexport const HelpIcon = props => <FontAwesomeIcon icon=\"question-circle\" {...props} />;\nexport const ExpandIcon = props => <FontAwesomeIcon icon=\"expand-arrows-alt\" {...props} />;\nexport const SearchIcon = props => <FontAwesomeIcon icon=\"search\" {...props} />;\nexport const TableIcon = props => <FontAwesomeIcon icon=\"table\" {...props} />;\nexport const DownloadIcon = props => <FontAwesomeIcon icon=\"file-download\" {...props} />;\nexport const LeftIcon = props => <FontAwesomeIcon icon=\"chevron-left\" {...props} />;\nexport const ExternalLinkIcon = props => <FontAwesomeIcon icon=\"external-link-alt\" {...props} />;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './HelpIcon.scss';\n\nimport { Tooltip } from 'react-tippy';\nimport { HelpIcon as Help } from '../../components/Icons/Icons';\n\nclass HelpIcon extends PureComponent {\n  static propTypes = {\n    text: PropTypes.string,\n  };\n\n  static defaultProps = {\n    text: '',\n  };\n\n  render() {\n    const { text } = this.props;\n\n    return (\n      <Tooltip\n        // options\n        title={text}\n        position=\"top\"\n        trigger=\"click\"\n        theme=\"light\"\n        className=\"HelpTooltip\"\n      >\n        <Help className=\"HelpIcon\" />\n      </Tooltip>\n    );\n  }\n}\n\nexport default HelpIcon;\n","import React, { PureComponent } from 'react';\nimport { Button } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport Slider from 'rc-slider';\nimport Tooltip from 'rc-tooltip';\nimport * as d3 from 'd3';\n\nimport HelpIcon from '../HelpIcon/HelpIcon';\nimport MultiSelect from '../MultiSelect/MultiSelect';\n\nimport 'rc-slider/assets/index.css';\nimport './DisplayView.scss';\n\nconst createSliderWithTooltip = Slider.createSliderWithTooltip;\nconst Range = createSliderWithTooltip(Slider.Range);\nconst Handle = Slider.Handle;\n\nconst handle = props => {\n  const { value, dragging, index, ...restProps } = props;\n  return (\n    <Tooltip\n      prefixCls=\"rc-slider-tooltip\"\n      overlay={value}\n      visible={dragging}\n      placement=\"top\"\n      key={index}\n    >\n      <Handle value={value} {...restProps} />\n    </Tooltip>\n  );\n};\n\nconst configShape = PropTypes.shape({\n  description: PropTypes.string,\n  id: PropTypes.string,\n  label: PropTypes.string,\n  type: PropTypes.string,\n  values: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.string,\n      value: PropTypes.string,\n    }),\n  ),\n});\n\n/**\n * This view displays and manages options for filtering the network view.\n */\nclass DisplayView extends PureComponent {\n  static propTypes = {\n    handleChange: PropTypes.func.isRequired,\n    showCount: PropTypes.number,\n    sortByConfig: configShape,\n    viewConfigs: PropTypes.array.isRequired,\n  };\n\n  static defaultProps = {\n    handleChange: () => { },\n    viewConfigs: [],\n  };\n\n  /**\n   *\n   */\n  constructor(props) {\n    super(props);\n    this.handleDisplayChange = this.handleDisplayChange.bind(this);\n    this.handleDisplayClear = this.handleDisplayClear.bind(this);\n    this.handleSelectAll = this.handleSelectAll.bind(this);\n  }\n\n  /**\n   * handle change callbackc\n   *\n   * @param {String} id Id of option to change\n   * @param {Any} value New Value\n   */\n  handleDisplayChange(id, value) {\n    this.props.handleChange(id, value);\n  }\n\n  /**\n   * Handle clear callback\n   */\n  handleDisplayClear() {\n    const { viewConfigs } = this.props;\n\n    viewConfigs.forEach(c => {\n      this.props.handleChange(c.id, undefined);\n    });\n  }\n\n  /**\n   * Handle select all callback\n   *\n   * @param {Object} config The config for the option to select all of\n   */\n  handleSelectAll(config) {\n    const values = config.values.map(v => v.value);\n    this.props.handleChange(config.id, values);\n  }\n\n  /**\n   * Renders dropdown\n   *\n   * @param {Object} config Config object for option\n   */\n  renderDropDown(config) {\n    const currentValue = this.props[config.id];\n\n    let help = null;\n\n    if (config.description) {\n      help = <HelpIcon text={config.description} />;\n    }\n\n    const multi = !!config.multi;\n\n    let selectAll = null;\n    if (config.selectAll) {\n      selectAll = (\n        <Button\n          className=\"select-all\"\n          variant=\"link\"\n          onClick={this.handleSelectAll.bind(this, config)}\n        >\n          select all\n        </Button>\n      );\n    }\n\n    return (\n      <div className=\"control-item\" key={config.id}>\n        <label htmlFor={config.id}>{config.label}</label>\n        {help}\n        <MultiSelect\n          id={config.id}\n          description={config.description}\n          values={config.values}\n          value={currentValue}\n          label={config.label}\n          handleChange={this.handleDisplayChange}\n          multi={multi}\n        />\n        {selectAll}\n      </div>\n    );\n  }\n\n  /**\n   *\n   * @param {Object} config\n   */\n  renderSlider(config) {\n    const [min, max] = config.range;\n\n    let currentValue = this.props[config.id];\n    if (currentValue === undefined || currentValue === null) {\n      currentValue = config.default;\n    }\n\n    const step = config.step;\n\n    const range = d3.range(min, max + 1, step);\n    let marks = config.marks;\n\n    if (!marks) {\n      marks = range.reduce((memo, i) => {\n        memo[i] = i;\n        return memo;\n      }, {});\n    }\n\n    return (\n      <div className=\"control-item slider-option\" key={config.id}>\n        <label>\n          {config.label}: {currentValue} {config.unit}\n        </label>\n        <Slider\n          min={min}\n          max={max}\n          value={currentValue}\n          marks={marks}\n          step={step}\n          onChange={value => {\n            this.handleDisplayChange(config.id, value);\n          }}\n          disabled={false}\n          handle={handle}\n        />\n      </div>\n    );\n  }\n\n  /**\n   *\n   * @param {Object} config\n   */\n  renderRange(config) {\n    const [min, max] = config.range;\n\n    const currentValue = this.props[config.id] || config.default;\n    const step = config.step;\n\n    const range = d3.range(min, max + 1, step);\n    let marks = config.marks;\n\n    if (!marks) {\n      marks = range.reduce((memo, i) => {\n        memo[i] = i;\n        return memo;\n      }, {});\n    }\n\n    return (\n      <div className=\"control-item slider-option\" key={config.id}>\n        <label>\n          {config.label}: {currentValue[0]} - {currentValue[1]} {config.unit}\n        </label>\n        <Range\n          min={min}\n          max={max}\n          value={currentValue}\n          marks={marks}\n          step={step}\n          onChange={value => {\n            this.handleDisplayChange(config.id, value);\n          }}\n          disabled={false}\n          handle={handle}\n        />\n      </div>\n    );\n  }\n\n  /**\n   *\n   * @param {Object} config\n   */\n  renderTitle(config) {\n    let reset = null;\n    if (config.reset) {\n      reset = (\n        <div className=\"clear-link\">\n          <Button variant=\"link\" onClick={this.handleDisplayClear}>\n            clear\n          </Button>\n        </div>\n      );\n    }\n\n    return (\n      <div key={config.id} className=\"title-area\">\n        <div key={config.id} className=\"section-head\">\n          {config.label}\n        </div>\n        {reset}\n      </div>\n    );\n  }\n\n  /**\n   *\n   * @param {Obect} config\n   */\n  renderViewControl(config) {\n    switch (config.type) {\n      case 'slider': {\n        return this.renderSlider(config);\n      }\n      case 'range': {\n        return this.renderRange(config);\n      }\n      case 'title': {\n        return this.renderTitle(config);\n      }\n      default: {\n        return this.renderDropDown(config);\n      }\n    }\n  }\n\n  /**\n   *\n   */\n  render() {\n    const { viewConfigs } = this.props;\n\n    return (\n      <div className=\"DisplayOptions\">\n        <div className=\"title-area\">\n          <div className=\"section-head\">View</div>\n          <div className=\"clear-link\">\n            <Button variant=\"link\" onClick={this.handleDisplayClear}>\n              clear\n            </Button>\n          </div>\n        </div>\n\n        {viewConfigs.map(this.renderViewControl.bind(this))}\n        <hr />\n      </div>\n    );\n  }\n}\n\nexport default DisplayView;\n","/**\n * Converts snake_case_string to CamelCaseString.\n *\n * @param {String} s snake_case_string\n * @return {String} CamelCaseString\n */\nexport function snakeToCamel(s) {\n  if (!s) return s;\n  return s.replace(/(_\\w)/g, function(m) {\n    return m[1].toUpperCase();\n  });\n}\n\n/**\n * Capitalize the first letter of the input string\n * @param {String} s input String\n * @return {String} Output String\n */\nexport function capitalize(s) {\n  if (!s) return s;\n  return s.charAt(0).toUpperCase() + s.slice(1);\n}\n\n/**\n * Converts snake_string_value to a sentence,\n * by replacing the underscores with spaces.\n *\n * @param {String} s Input snake_case_string\n * @return {String} Sentence.\n */\nexport function snakeToSentence(s) {\n  if (!s) return s;\n  return s.replace(/(_)/g, ' ');\n}\n\n/**\n * Converts snake_string_value to a sentence,\n * by replacing the underscores with spaces.\n * All words in the sentence are capitalized.\n *\n * @param {String} s Input snake_case_string\n * @return {String} Capitalized Sentence.\n */\nexport function snakeToCapSentence(s) {\n  if (!s) return s;\n  const newSentence = s.replace(/(_)+/g, ' ');\n  const words = newSentence.split(' ');\n  return words.map(w => capitalize(w)).join(' ');\n}\n\n/**\n * Converts value to a display string, appropriate\n * for displaying as a label.\n *\n * @param {Any} value The value to display\n * @return {String} value to display\n */\nexport function displayLabelFor(value) {\n  let displayValue = value;\n\n  if (Array.isArray(value)) {\n    displayValue = value.join(' / ');\n  }\n\n  if (typeof variable === 'boolean') {\n    displayValue = value ? 'true' : 'false';\n  }\n\n  return displayValue;\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport SearchView from './SearchView';\nimport FilterView from './FilterView';\nimport DisplayView from './DisplayView';\nimport { uniqueValues } from '../../utils/collection';\nimport { removeEmptyKeys } from '../../utils/object';\nimport { capitalize } from '../../utils/string';\n\nimport './Controls.scss';\n\n/**\n * Pull out an array of {value, label} objects for\n * a given property in the dataDefs\n */\nfunction extractProperties(dataDefs, propertyName) {\n  const properties = dataDefs\n    .filter(d => d[propertyName])\n    .map(def => {\n      return { value: def.id, label: def.label };\n    });\n\n  return properties;\n}\n\n/**\n * Side panel controls display. Powered by controlsConfig and dataDefs.\n * A Control is composed of a Search, Display, and Filter sections,\n * all implemented as separate components. Each section is optional\n * in the Control display and it is up to teh controlsConfig to configure\n * which sections are displayed.\n */\nclass Controls extends Component {\n  static propTypes = {\n    /**\n     * Configuration of different controls sections.\n     * Provides details on how the controls should be displayed.\n     */\n    controlsConfig: PropTypes.object.isRequired,\n\n    /**\n     * Array of data definitions.\n     */\n    dataDefs: PropTypes.array.isRequired,\n\n    /**\n     * Filters object\n     */\n    filters: PropTypes.object,\n\n    /**\n     * Filters change callback\n     */\n    onChangeFilters: PropTypes.func,\n\n    /**\n     * Search change callback\n     */\n    onChangeSearch: PropTypes.func,\n\n    /**\n     * Search values\n     */\n    search: PropTypes.array,\n\n    /**\n     * Should the controls be displayed?\n     */\n    shouldDisplayControls: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    shouldDisplayControls: true,\n    onChangeSearch: () => {},\n    onChangeFilters: () => {},\n    footer: null,\n  };\n\n  /**\n   * Create configuration object for filter section\n   */\n  static generateFilterConfig(dataDefs, data) {\n    // We generate filter options based on data defs.\n    const filterData = data || [];\n    const filterValues = dataDefs\n      .filter(d => d.filterBy)\n      .map(filterDef => {\n        const level = filterDef.level;\n        switch (level) {\n          case 'Categorical':\n          case 'Nominal': {\n            const id = filterDef.id;\n            const label = filterDef.label;\n            const description = filterDef.description;\n            const addMultipleIds = filterDef.addMultipleIds;\n            const values = uniqueValues(filterData, id).map(d => {\n              return { value: d, label: d };\n            });\n            return { id, level, values, label, description, addMultipleIds };\n          }\n          default:\n            return undefined;\n        }\n      });\n\n    return filterValues.filter(d => d !== undefined);\n  }\n\n  /**\n   * Create configuration object for view section\n   */\n  static generateViewConfig(viewConfig, dataDefs) {\n    let values = [];\n    if (viewConfig.values) {\n      values = viewConfig.values;\n    } else {\n      values = extractProperties(dataDefs, viewConfig.id);\n    }\n    return Object.assign({}, viewConfig, { values });\n  }\n\n  /**\n   * Create configuration object for search section\n   */\n  static generateSearchConfig(dataDefs, data, searchConfig = {}) {\n    // We generate filter options based on data defs.\n    const searchProps = dataDefs.filter(d => d.searchBy);\n\n    const desc = searchConfig.description || 'Search';\n\n    let items = [];\n    if (searchProps.length > 0) {\n      items = data.map(node => {\n        const item = {};\n        searchProps.forEach(prop => {\n          item[prop.id] = node[prop.id];\n        });\n        // TODO: Fix hardcoded label / id\n        item.value = node.id;\n        item.label = node.name;\n        return item;\n      });\n    }\n\n    return {\n      id: 'search',\n      label: 'Search',\n      description: desc,\n      values: items,\n      searchProps,\n    };\n  }\n\n  /**\n   * Constructor\n   */\n  constructor(props) {\n    super(props);\n    this.handleFilterChange = this.handleFilterChange.bind(this);\n    this.handleDisplayChange = this.handleDisplayChange.bind(this);\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n\n    this.state = {\n      filterConfigs: [],\n      viewConfigs: [],\n    };\n  }\n\n  /**\n   * React Lifecycle method\n   */\n  componentDidMount() {\n    this.updateConfigs(this.props);\n  }\n\n  /**\n   * React Lifecycle method\n   */\n  componentWillReceiveProps(nextProps) {\n    let update = false;\n\n    if (this.props.data !== nextProps.data) {\n      update = true;\n    }\n\n    if (update) {\n      this.updateConfigs(nextProps);\n    }\n  }\n\n  /**\n   * React Lifecycle method\n   */\n  shouldComponentUpdate(nextProps, nextState) {\n    const propKeys = Object.keys(nextProps);\n    let updated = [];\n    propKeys.forEach(k => {\n      if (!this.props[k] || !(this.props[k] === nextProps[k])) {\n        updated.push(k);\n      }\n    });\n\n    const stateKeys = Object.keys(nextState);\n    stateKeys.forEach(k => {\n      if (!this.state[k] || !(this.state[k] === nextState[k])) {\n        updated.push(k);\n      }\n    });\n\n    const ignoreProps = ['children'];\n    ignoreProps.forEach(p => {\n      const ignoreIndex = updated.indexOf(p);\n      if (ignoreIndex >= 0) {\n        updated.splice(ignoreIndex, 1);\n      }\n    });\n\n    return updated.length > 0;\n  }\n\n  /**\n   * Callback for filter section control change\n   */\n  handleFilterChange(newVal) {\n    const noEmpty = removeEmptyKeys(newVal);\n    this.props.onChangeFilters(noEmpty);\n  }\n\n  /**\n   * Callback for search section change\n   */\n  handleSearchChange(newVal) {\n    const { onChangeSearch } = this.props;\n\n    if (onChangeSearch) {\n      onChangeSearch(newVal);\n    }\n  }\n\n  /**\n   * Callback for display section control change\n   */\n  handleDisplayChange(propertyId, value) {\n    const handler = `onChange${capitalize(propertyId)}`;\n    if (this.props[handler]) {\n      this.props[handler](value);\n    } else {\n      console.error('WARNING: No on change for: ' + handler);\n    }\n  }\n\n  /**\n   * Regenerate the configurations for the different control sections\n   *\n   * @param {Object} props Props\n   */\n  updateConfigs(props) {\n    const { data, dataDefs, controlsConfig } = props;\n\n    const filterConfigs = Controls.generateFilterConfig(dataDefs, data);\n\n    const searchConfig = Controls.generateSearchConfig(dataDefs, data, controlsConfig.search);\n\n    const viewConfigs = [];\n    controlsConfig.view.forEach(view => {\n      viewConfigs.push(Controls.generateViewConfig(view, dataDefs));\n    });\n\n    this.setState({\n      filterConfigs,\n      viewConfigs,\n      searchConfig,\n      ...viewConfigs,\n    });\n  }\n\n  /**\n   * Render filter section\n   */\n  renderFilterView() {\n    const { controlsConfig, filters } = this.props;\n    const { filterConfigs } = this.state;\n\n    if (controlsConfig.filter && !controlsConfig.filter.display) {\n      return null;\n    }\n\n    return (\n      <FilterView\n        key={'filter'}\n        filterConfigs={filterConfigs}\n        filters={filters}\n        handleChange={this.handleFilterChange}\n      />\n    );\n  }\n\n  /**\n   * Render search section.\n   */\n  renderSearchView() {\n    const { controlsConfig, search } = this.props;\n    const { searchConfig } = this.state;\n\n    // don't show search if we haven't enabled it\n    if (!controlsConfig.search || (controlsConfig.search && !controlsConfig.search.display)) {\n      return null;\n    }\n\n    return (\n      <SearchView\n        key={'search'}\n        search={search}\n        searchConfig={searchConfig}\n        handleChange={this.handleSearchChange}\n      />\n    );\n  }\n\n  /**\n   * Render display section\n   */\n  renderDisplayView() {\n    const { filters, controlsConfig, ...others } = this.props;\n\n    const { viewConfigs } = this.state;\n\n    if (!viewConfigs || viewConfigs.length === 0) {\n      return null;\n    }\n\n    return (\n      <DisplayView\n        key={'display'}\n        viewConfigs={viewConfigs}\n        handleChange={this.handleDisplayChange}\n        {...others}\n      />\n    );\n  }\n\n  /**\n   * Render footer.\n   */\n  renderFooter() {\n    const { footer } = this.props;\n\n    return <div className=\"footer\">{footer}</div>;\n  }\n\n  /**\n   * React render method.\n   */\n  render() {\n    const { shouldDisplayControls, children } = this.props;\n\n    let controls = [];\n\n    if (shouldDisplayControls) {\n      controls = [this.renderSearchView(), this.renderDisplayView(), this.renderFilterView()];\n    }\n\n    return (\n      <div className=\"Controls\">\n        {children}\n        <hr />\n        {controls}\n        {this.renderFooter()}\n      </div>\n    );\n  }\n}\n\nexport default Controls;\n","import uniq from 'lodash.uniq';\nimport isEmpty from 'lodash.isempty';\nimport isFinite from 'lodash.isfinite';\nimport get from 'lodash.get';\nimport * as d3 from 'd3';\n\n/**\n * For a given array, return the value associated with attr from\n * the first element in the array. If the array is empty, return\n * the defaultValue.\n *\n * @param {Array} array Array of values to pick from\n * @param {String|Array} attr Attribute to select. Can also be a lodash.get style selector.\n * @param {Any} defaultValue Value to use if array is empty\n */\nexport function pickFirst(array, attr, defaultValue = null) {\n  return array && array.length > 0 ? get(array[0], attr, defaultValue) : defaultValue;\n}\n\n/**\n * Returns the unique values of a given property of a collection.\n *   Value associated with the property can be a string,\n *   a number, or an array\n * @param  {Array} collection\n * @param  {String} propertyName\n * @return {Array} an array of unique values.\n */\nexport function uniqueValues(collection, propertyName) {\n  if (!collection) {\n    return [];\n  }\n\n  let allValues = collection.map(d => {\n    if (Array.isArray(d[propertyName])) {\n      return uniq(d[propertyName]);\n    }\n    return d[propertyName];\n  });\n\n  // if array of arrays, we need to flatten\n  // one of many ways to flatten\n  // http://www.jstips.co/en/javascript/flattening-multidimensional-arrays-in-javascript/\n  allValues = [].concat(...allValues);\n\n  return uniq(allValues)\n    .filter(d => isFinite(d) || !isEmpty(d))\n    .sort(d3.ascending);\n}\n\n/**\n * Returns true if collection includes any in list\n * @param  {Array} collection Array of values to search\n * @param  {Array} list values to check for\n * @returns {Bool} true if collection contains any\n *  of the elements in list\n */\nexport function includesAny(collection, list) {\n  if (!collection || !list) {\n    return false;\n  }\n\n  if (!Array.isArray(collection)) {\n    collection = [collection];\n  }\n\n  // array.some tests whether at least one element\n  // in the array passes the test\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some\n  return collection.some(r => list.includes(r));\n}\n\n/**\n * Returns true if collection contains\n * every value inside list\n *\n * @param {Array} collection Array to check\n * @param {Array} list Array of values collection should include\n * @returns {Boolean} true if collection contains\n * every value inside list, false otherwise.\n */\nexport function includesEvery(collection, list) {\n  if (!collection) {\n    return false;\n  }\n\n  let pass = true;\n\n  // use for ... of to allow\n  // for early break if missing\n  // val is found.\n  for (const val of list) {\n    if (!collection.includes(val)) {\n      pass = false;\n      break;\n    }\n  }\n\n  return pass;\n}\n\n/**\n * If value is contained in collection, remove it.\n * If value is not contained in collection, add it.\n * @param  {Array} collection\n * @param  {Any} value\n * @returns {Array} new array with value toggled\n */\nexport function toggleValue(collection, value) {\n  // Use new Array\n  let newCollection = collection ? collection.slice() : [];\n\n  const valueIndex = newCollection.indexOf(value);\n\n  if (valueIndex >= 0) {\n    newCollection.splice(valueIndex, 1);\n  } else {\n    newCollection.push(value);\n  }\n\n  return newCollection;\n}\n\n/**\n * Creates a new array with all the values of collection in it and all the values of newValues in it.\n * Duplicate values are not added.\n * Values are extracted from newItems using the provided accessorFunc to add to collection.\n *\n * @param {Array} collection Array simple values.\n * @param {Array} newItems Array of Objects.\n * @param {Function} accessorFunc Used to determine if a\n * @returns {Array} Array containing the union of collection and values extracted from newItems via accessorFunc.\n */\nexport function addIfMissing(collection, newItems, accessorFunc = d => d.key) {\n  if (!collection) {\n    collection = [];\n  }\n  const newCollection = collection.slice();\n\n  newItems.forEach(d => {\n    if (!newCollection.includes(accessorFunc(d))) {\n      newCollection.push(accessorFunc(d));\n    }\n  });\n\n  return newCollection;\n}\n\n/**\n * Orders a set of categorical values so that None goes last.\n * @param {Array} categories\n * @returns {Array} sorted categories\n */\nexport function orderCategories(categories) {\n  return categories.sort((a, b) => {\n    if (a === 'None') {\n      return 1;\n    }\n\n    if (b === 'None') {\n      return -1;\n    }\n\n    return d3.ascending(a, b);\n  });\n}\n\n/**\n * Turns array inside out to create a object of objects with\n * each inner object containing all the values\n * [\n *  {id: 1, a: true},\n *  {id: 2, a: false, b:true}\n * ]\n * into\n * {a: {1: {id: 1, a: true}, b: {2: {id: 1, b: true, a: false}}}\n * @param {Array} collection\n */\nexport function invert(collection, accessor = d => d.id) {\n  const inverted = {};\n  const boolValues = d3.set();\n  collection.forEach(entry => {\n    Object.keys(entry).forEach(k => boolValues.add(k));\n  });\n\n  boolValues.each(key => {\n    const filteredValues = collection.filter(entry => entry[key]);\n    const keyedValues = {};\n    filteredValues.forEach(v => (keyedValues[accessor(v)] = v));\n\n    inverted[key] = keyedValues;\n  });\n\n  return inverted;\n}\n\n/**\n * concats together an array of arrays\n * @param {Array} arrays Array of arrays\n */\nexport function concatArrays(arrays) {\n  return [].concat.apply([], arrays);\n}\n\n/**\n * Merges two arrays by a shared id\n * could use https://github.com/ZitRos/array-merge-by-key\n * if that would be better.\n */\nexport function joinById(id, arrayA, arrayB) {\n  const arrayBMap = d3.map(arrayB, d => d[id]);\n\n  const mergedData = [];\n\n  arrayA.forEach(row => {\n    let mergedRow = {};\n    if (arrayBMap.has(row[id])) {\n      mergedRow = Object.assign({}, row, arrayBMap.get(row[id]));\n    } else {\n      mergedRow = Object.assign({}, row);\n    }\n\n    mergedData.push(mergedRow);\n  });\n\n  return mergedData;\n}\n\n/**\n * Adds contents from an object to an array of objects based on\n * input key.\n *\n * @param {Array} arrayOfObjects An Array of objects to modify\n * @param {Object} dict Object that serves as a dictionary to\n *   pull out additional info to append to objects in the\n *   arrayOfObjects array.\n * @param {String} key Key to match objects in arrayOfObjects and\n *   keys of dict by.\n * @param {String} path Path in objects of arrayOfObjects to\n *   put the new contents from dict in to.\n * @returns {Array} arrayOfObjects with new additions to each\n *   object from the values of dict.\n */\nexport function addByKey(arrayOfObjects, dict, key = 'key', newPath = 'details') {\n  arrayOfObjects.forEach(obj => {\n    // find new content for obj from its key\n    const newContent = dict[obj[key]];\n    if (newContent) {\n      obj[newPath] = newContent;\n    }\n  });\n\n  return arrayOfObjects;\n}\n\n/**\n * Returns powerset of an array of values\n * derived from: https://stackoverflow.com/questions/42773836/how-to-find-all-subsets-of-a-set-in-javascript\n * @param {Array} values Array of values\n */\nexport function powerSet(values) {\n  const pSet = values.reduce(\n    (subsets, value) => {\n      return subsets.concat(subsets.map(set => [value, ...set]));\n    },\n    [[]],\n  );\n  // sort all sets by name - for consistency\n  pSet.forEach(s => s.sort(d3.ascending));\n  // sort by length\n  pSet.sort((a, b) => a.length - b.length);\n\n  return pSet;\n}\n","import isEmpty from 'lodash.isempty';\n\n/**\n * Removes keys from an object that are empty.\n *\n * Returns a new empty. Will only go one level deep into objects\n * @param  {Object} obj input object\n * @return {Object}\n */\nexport function removeEmptyKeys(obj) {\n  const res = {};\n  const keys = Object.keys(obj);\n  keys.forEach(key => {\n    const prop = obj[key];\n    if (typeof prop === 'object' && !Array.isArray(prop) && prop !== null) {\n      const temp = removeEmptyKeys(prop);\n      if (!isEmpty(temp)) {\n        res[key] = temp;\n      }\n    } else if (!(prop === undefined || prop === null)) {\n      res[key] = prop;\n    }\n  });\n\n  return res;\n}\n\n/**\n * Convert Array of objects into an object keyed by\n * keyField.\n * @param {Array} array Array to convert to object\n * @param {String} keyField Attribute of array's objects to use as key\n * @return {Object} Object keyed by keyField values.\n */\nexport function arrayToObject(array, keyField) {\n  if (!array) {\n    return {};\n  }\n\n  return array.reduce((obj, item) => {\n    if (item[keyField]) {\n      obj[item[keyField]] = item;\n    }\n    return obj;\n  }, {});\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nimport './SidebarPage.scss';\n\n/**\n * Layout for Page with Control Sidebar\n */\nclass SidebarPage extends Component {\n  static propTypes = {\n    /**\n     * Content of the page\n     */\n    children: PropTypes.any.isRequired,\n\n    /**\n     * Classname to give container\n     */\n    name: PropTypes.string.isRequired,\n\n    /**\n     * Sidebar content\n     */\n    sidebar: PropTypes.any.isRequired,\n  };\n\n  /**\n   * Render sidebar\n   */\n  renderSidebar() {\n    const { sidebar } = this.props;\n    return (\n      <Col xl={3} md={3} className=\"Sidebar d-flex flex-column\">\n        {sidebar}\n      </Col>\n    );\n  }\n\n  /**\n   * Render main\n   */\n  renderMain() {\n    const { children } = this.props;\n\n    return (\n      <Col xl={9} md={9} className=\"Main\">\n        {children}\n      </Col>\n    );\n  }\n\n  /**\n   * React render method\n   */\n  render() {\n    const { name } = this.props;\n    return (\n      <Container fluid={true} className={name}>\n        <Row className=\"flex-xl-nowrap\">\n          {this.renderSidebar()}\n          {this.renderMain()}\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default SidebarPage;\n","import { interpolateArray } from 'd3';\n\nconst X = 0;\nconst Y = 1;\n\n/**\n * Calculates the length of a line given two points\n *\n * @param {Number[]} a The first point [x, y]\n * @param {Number[]} b The second point [x, y]\n *\n * @return {Number} The length of the line\n */\nexport function lineLength(a, b) {\n  return Math.sqrt(Math.pow(a[X] - b[X], 2) + Math.pow(a[Y] - b[Y], 2));\n}\n\n/**\n * Finds a point on a line (as defined by two points) at a given length\n *\n * @param {Number[]} startPoint The first point [x, y]\n * @param {Number[]} endPoint The second point [x, y]\n * @param {Number} length How far along the line the point will be\n *\n * @return {Number[]} The point on the line at the specified length\n */\nexport function pointOnLine(start, end, length) {\n  const deltaLength = lineLength(start, end);\n\n  return [\n    start[X] + (end[X] - start[X]) * (length / deltaLength),\n    start[Y] + (end[Y] - start[Y]) * (length / deltaLength),\n  ];\n}\n\n/**\n * Rotate a point ([x, y]) around an origin ([x, y]) by theta radians\n *\n * @param {Number[]} point [x, y]\n * @param {Number} thetaRadians How many radians to rotate the point around origin\n * @param {Number[]} [origin] [x, y] (defaults to [0, 0])\n *\n * @return {Number[]} The rotated point [x, y]\n */\nexport function rotate(point, thetaRadians, origin = [0, 0]) {\n  const rotatedEndX =\n    origin[X] +\n    ((point[X] - origin[X]) * Math.cos(thetaRadians) -\n      (point[Y] - origin[Y]) * Math.sin(thetaRadians));\n  const rotatedEndY =\n    origin[Y] +\n    ((point[X] - origin[X]) * Math.sin(thetaRadians) +\n      (point[Y] - origin[Y]) * Math.cos(thetaRadians));\n\n  return [rotatedEndX, rotatedEndY];\n}\n\n/**\n * Create a curved path `d` attribute between two given points\n *\n * @param {Number[]} start the start point [x, y]\n * @param {Number[]} end the end point [x, y]\n * @param {Number} amount=0.5 How flat/peaked the line is. Corresponds to dragging\n *   the control points at an angle towards the middle of the line (1) or\n *   to the end points (0)\n * @param {Boolean} rotationDir=false Which direction to curve\n *   (true = clockwise, false = counter-clockwise)\n *\n * @return {String} The `d` attribute for a curved line between two points\n */\nexport default function curvedPath(start, end, amount = 0.5, rotationDir) {\n  const theta = rotationDir ? -Math.PI / 4 : Math.PI / 4;\n\n  // rotate the end point 45 degrees around the start point\n  const rotatedPoint = rotate(end, theta, start);\n\n  // scale this point to be in the middle of the line\n  const midRotatedPoint = pointOnLine(\n    start,\n    rotatedPoint,\n    (Math.sqrt(2) / 2) * lineLength(start, end),\n  );\n\n  // adjust the control points to be between this rotated midpoint and the end points\n  const startControlPoint = interpolateArray(start, midRotatedPoint)(amount);\n  const endControlPoint = interpolateArray(end, midRotatedPoint)(amount);\n\n  return `M${start[X]},${start[Y]}\n          C${startControlPoint[X]},${startControlPoint[Y]}\n           ${endControlPoint[X]},${endControlPoint[Y]}\n           ${end[X]},${end[Y]}`;\n}\n","import curvedPath from './curvedPath';\n\n// constants\nconst arrowSize = 10;\nconst arrowPadding = 1;\n\n/**\n * Provides an array of points to draw an arrow given source and target\n *\n * @param {Object} source Source node\n * @param {Object} target Target node\n * @param {Object} targetSize Radius of target in pixels\n */\nfunction endArrow(source, target, targetSize, edgeSize) {\n  let toX = target.x;\n  let toY = target.y;\n\n  const angle = Math.atan2(target.y - source.y, target.x - source.x);\n  const angleOffset = (16 / 180) * Math.PI;\n\n  // adjust the end to be outside the target node\n  // use edgesize to move arrowhead away from target\n  toX = target.x - (targetSize + arrowPadding + edgeSize * 1.5) * Math.cos(angle);\n  toY = target.y - (targetSize + arrowPadding + edgeSize * 1.5) * Math.sin(angle);\n\n  return [\n    [toX, toY],\n    [\n      toX - Math.cos(angle + angleOffset) * (arrowSize - edgeSize / 2),\n      toY - Math.sin(angle + angleOffset) * (arrowSize - edgeSize / 2),\n    ],\n    [\n      toX - Math.cos(angle - angleOffset) * (arrowSize - edgeSize / 2),\n      toY - Math.sin(angle - angleOffset) * (arrowSize - edgeSize / 2),\n    ],\n    [toX, toY],\n  ];\n}\n\n/**\n * Draw a line from source to target\n * @param {Array} source 2D array\n * @param {Array} target 2D array\n */\nfunction lineTo(source, target) {\n  return `M${source[0]},${source[1]} L${target[0]},${target[1]}`;\n}\n\n/**\n * Draw an edge Arrow for a edge\n *\n * @param {Object} d Edge\n * @param {Object} sourceSize Radius of source in pixels\n * @param {Object} targetSize Radius of target in pixels\n * @param {Object} edgeSize width of edge in pixels\n */\nexport function edgeArrow(edge, sourceSize, targetSize, edgeSize) {\n  // diff between source and target\n  const dx = edge.target.x - edge.source.x;\n  const dy = edge.target.y - edge.source.y;\n\n  // angle between two vectors\n  const angle = Math.atan2(dy, dx);\n\n  // for unexpanded arcs, use offset of 0.5\n  let offset = 0.5;\n  let rotationDir = false;\n\n  if (edge.source === edge.target) {\n    offset = 1.0;\n  }\n\n  if (edge.edgeIndex) {\n    // tweak for expanded arcs\n    rotationDir = edge.edgeIndex % 2 === 0;\n    offset = Math.min(0.05 + 0.1 * (edge.edgeIndex / 2), 1.0);\n  }\n\n  const fromX = edge.source.x + sourceSize * Math.cos(angle);\n  const fromY = edge.source.y + sourceSize * Math.sin(angle);\n\n  let toPad = targetSize + arrowPadding + arrowSize + edgeSize;\n\n  // if edge is a dbEdge, then we won't be drawing arrow\n  if (edge.hideArrow) {\n    toPad = targetSize + edgeSize;\n  }\n\n  // make the new end of the edge be the edge of the arrow\n  const toX = edge.target.x - toPad * Math.cos(angle);\n  const toY = edge.target.y - toPad * Math.sin(angle);\n\n  let path = '';\n\n  if (edge.curved) {\n    path = curvedPath([fromX, fromY], [toX, toY], offset, rotationDir);\n  } else {\n    path = lineTo([fromX, fromY], [toX, toY]);\n  }\n\n  if (edge.edgeType !== 'dbEdge') {\n    // Calculate the points for the arrow and convert them to a path string\n    const arrowPath = endArrow(edge.source, edge.target, targetSize, edgeSize)\n      .map(a => `L${a[0]},${a[1]}`)\n      .join('');\n    // Replace first L with an M, and close path with Z, to generate valid SVG path\n    // string; then append arrowPath to existing edge path\n    path = `${path} M${arrowPath.substr(1)}Z`;\n  }\n  return path;\n}\n","class NetworkLayout {\n  /**\n   * constructor\n   * @param {Object} props Props from parent component.\n   */\n  constructor(/* props */) {\n    this.ticked = this.ticked.bind(this);\n    this.ended = this.ended.bind(this);\n\n    this.tickedCallback = () => {};\n    this.endedCallback = () => {};\n  }\n\n  /**\n   * Connect ticked callback\n   * @param {Function} callback Call on each tick of the layout\n   */\n  onTicked(callback) {\n    this.tickedCallback = callback;\n  }\n\n  /**\n   * Connect ended callback\n   * @param {Function} callback Call on end\n   */\n  onEnded(callback) {\n    this.endedCallback = callback;\n  }\n\n  /**\n   * Update layout\n   * @param {Object} props Props from parent component.\n   * @param {Object} svgG SVG group to draw into\n   */\n  render(/* props, svgG */) {\n    return null;\n  }\n\n  /**\n   * Restart layout\n   * @param {Array} nodes Nodes of Graph\n   * @param {Array} edges Edges of Graph\n   */\n  restart(/* nodes, edges */) {}\n\n  /**\n   * Clean up Layout on change\n   * @param {Object} svgG SVG group to draw into\n   */\n  exit(/* svgG */) {}\n\n  /**\n   *\n   */\n  find(/* x, y*/) {\n    return undefined;\n  }\n\n  /**\n   * Simulation ticked callback\n   */\n  ticked() {\n    this.tickedCallback();\n  }\n\n  /**\n   * Simulation ended callback\n   */\n  ended() {\n    this.endedCallback();\n  }\n\n  /**\n   * Method to 'warm up' simulation\n   */\n  warm() {\n    if (this.simulation) {\n      this.simulation.alphaTarget(0.3).restart();\n    }\n  }\n\n  /**\n   * Method to 'cool down' simulation\n   */\n  cool() {\n    if (this.simulation) {\n      this.simulation.alphaTarget(0);\n    }\n  }\n}\n\nexport default NetworkLayout;\n","import * as d3 from 'd3';\n\n/**\n * Constants used for network display\n */\nexport const networkDisplay = {\n  nodeSelectColor: 'tomato',\n  nodeHighlightColor: 'tomato',\n  nodeSizeRange: [4, 50],\n  edgeHighlightColor: 'tomato',\n  edgeColor: '#ddd',\n  edgeColorRange: ['#ddd', '#888'],\n  edgeWidthRange: [3, 8],\n  edgeExpandColor: '#555',\n  nodeSize: 8,\n  legendDimColor: '#dddddd',\n  edgeDirColors: [\n    { id: 'Both', color: '#66BB6A' },\n    { id: 'Out', color: '#BB3B38' },\n    { id: 'In', color: '#42A5F5' },\n    { id: 'None', color: '#BDBDBD' },\n  ],\n  nodeShapes: {\n    Both: d3.symbolSquare,\n    In: d3.symbolCircle,\n    Out: d3.symbolDiamond,\n    None: d3.symbolCircle,\n  },\n};\n","import * as d3 from 'd3';\n\nimport NetworkLayout from './NetworkLayout';\n\nimport { networkDisplay } from './constants';\n\n/**\n * Setup simulation to run in force layout mode.\n * @param {Object} props Input props\n */\nfunction setupForceSimulation(props) {\n  const { width, height, rScale, sizeBy } = props;\n\n  let { chargeMultiplier } = props;\n\n  if (!chargeMultiplier) {\n    chargeMultiplier = 1.0 / networkDisplay.nodeSize;\n  }\n\n  const simulation = d3\n    .forceSimulation()\n    .alphaMin(0.04)\n    .velocityDecay(0.2);\n\n  simulation.stop();\n\n  // now edges and how they impact\n  // the layout of the network is all\n  // handled in a link force\n  const linkForce = d3\n    .forceLink()\n    .distance(100 * chargeMultiplier)\n    .id(d => d.id);\n\n  // add the link force to the simulation\n  simulation.force('links', linkForce);\n  // setup a center force to keep nodes\n  // in middle of the div\n  simulation.force('center', d3.forceCenter(width / 2, height / 2 - 160));\n\n  // setup many body force to have nodes repel one another\n  // increasing the chargePower here to make nodes stand about\n  // TODO: need to figure out original vs current value\n  // TODO: is there a more appropriate place for this function?\n  function charge(d) {\n    const c = -Math.pow(rScale(d[sizeBy]), 2.0) * (4.0 * chargeMultiplier);\n    return c;\n  }\n\n  const chargeDistance = sizeBy === 'none' ? Infinity : Infinity;\n\n  simulation.force(\n    'charge',\n    d3\n      .forceManyBody()\n      .strength(charge)\n      .distanceMax(chargeDistance),\n  );\n\n  // put the nodes with no edges somewhere\n  // TODO: clean up.\n  const xForce = d3\n    .forceX()\n    .strength(0.02)\n    .x(d => (d.totalEdges > 0 ? null : width / 2));\n\n  const yForce = d3\n    .forceY()\n    .strength(0.02)\n    .y(d => (d.totalEdges > 0 ? null : height / 2));\n\n  // add these forces to the simulation\n  simulation.force('x', xForce);\n  simulation.force('y', yForce);\n\n  return simulation;\n}\n\n/**\n * Force Network Layout.\n */\nclass ForceLayout extends NetworkLayout {\n  /**\n   * Constructor\n   */\n  constructor(props) {\n    super(props);\n    this.simulation = setupForceSimulation(props);\n  }\n\n  /**\n   * Restarts the simulation, given a set of nodes and edges.\n   */\n  restart(nodes, edges) {\n    this.simulation.on('tick', this.ticked).on('end', this.ended);\n    this.simulation.nodes(nodes);\n    this.simulation.force('links').links(edges);\n    this.simulation.alpha(1).restart();\n  }\n\n  /**\n   *\n   */\n  find(x, y, r) {\n    return this.simulation.find(x, y, r);\n  }\n}\n\nexport default ForceLayout;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3 from 'd3';\nimport addComputedProps, { compose } from 'react-computed-props';\n\nimport { floatingTooltip } from '../tooltip/tooltip';\nimport { edgeArrow } from './layouts/draw';\nimport ForceLayout from './layouts/ForceLayout';\nimport { networkDisplay } from './layouts/constants';\n\nimport './Network.scss';\n\nfunction chartProps(props) {\n  const { height, width, graph } = props;\n\n  const padding = {\n    top: 20,\n    right: 20,\n    bottom: 20,\n    left: 20,\n  };\n\n  const plotWidth = width - padding.left - padding.right;\n  const plotHeight = height - padding.top - padding.bottom;\n\n  let rScale = () => networkDisplay.nodeSize;\n  const edgeColor = () => networkDisplay.edgeColor;\n  const colorScale = d3.scaleOrdinal(d3.schemeCategory10);\n  const nodeColor = d => colorScale(d.type);\n\n  let sizeBy = 'r';\n\n  const nodes = graph.nodes;\n  const edges = graph.edges;\n\n  return {\n    plotWidth,\n    plotHeight,\n    padding,\n    nodes,\n    edges,\n    rScale,\n    edgeColor,\n    nodeColor,\n    sizeBy,\n  };\n}\n\nfunction layoutProps(props) {\n  const layout = new ForceLayout(props);\n\n  return {\n    layout,\n  };\n}\n\n/**\n * Component.\n */\nclass Network extends Component {\n  static propTypes = {\n    colorScale: PropTypes.func,\n    graph: PropTypes.object,\n    height: PropTypes.number,\n    layout: PropTypes.object,\n    onClick: PropTypes.func,\n    padding: PropTypes.object,\n    plotHeight: PropTypes.number,\n    plotWidth: PropTypes.number,\n    width: PropTypes.number,\n  };\n\n  static defaultProps = {\n    graph: { nodes: [], edges: [] },\n    height: 800,\n    width: 600,\n    onClick: () => {},\n    colorScale: () => '#777',\n  };\n\n  /**\n   *\n   */\n  constructor(props) {\n    super(props);\n\n    this.ticked = this.ticked.bind(this);\n    this.ended = this.ended.bind(this);\n\n    this.dragStarted = this.dragStarted.bind(this);\n    this.dragEnded = this.dragEnded.bind(this);\n    this.dragged = this.dragged.bind(this);\n\n    this.mouseover = this.mouseover.bind(this);\n    this.mouseout = this.mouseout.bind(this);\n    this.mouseoverEdge = this.mouseoverEdge.bind(this);\n    this.mouseoutEdge = this.mouseoutEdge.bind(this);\n    this.click = this.click.bind(this);\n  }\n\n  /**\n   * When the react component mounts, setup the d3 vis\n   */\n  componentDidMount() {\n    this.setup();\n  }\n\n  /**\n   * When the react component updates, update the d3 vis\n   */\n  componentDidUpdate() {\n    this.update();\n    this.restartLayout();\n  }\n\n  /**\n   * Unmount callback method.\n   */\n  componentWillUnmount() {\n    this.tooltip.hideTooltip();\n  }\n\n  /**\n   *\n   */\n  mouseover(el, d) {\n    d3.select(el)\n      .raise()\n      .select('circle')\n      .classed('hover', true);\n  }\n\n  /**\n   *\n   */\n  mouseout(el) {\n    d3.select(el)\n      .select('circle')\n      .classed('hover', false);\n  }\n\n  /**\n   *\n   */\n  click(d) {\n    const { onClick } = this.props;\n\n    onClick(d);\n  }\n\n  /**\n   * callback for drag start\n   */\n  dragStarted() {\n    const { layout } = this.props;\n\n    if (!d3.event.active) {\n      layout.warm();\n    }\n\n    // NOTE: the subject is the data bound to the particular\n    // node being moved. Pretty cool!\n    d3.event.subject.fx = d3.event.subject.x;\n    d3.event.subject.fy = d3.event.subject.y;\n  }\n\n  /**\n   * callback for drag\n   */\n  dragged() {\n    d3.event.subject.fx = d3.event.x;\n    d3.event.subject.fy = d3.event.y;\n  }\n\n  /**\n   * callback for drag end\n   */\n  dragEnded() {\n    const { layout } = this.props;\n\n    if (!d3.event.active) {\n      layout.cool();\n    }\n  }\n\n  /**\n   * Called when edge is moused over\n   * @param {Object} d Data for edge\n   * @param {Object} edge Edge DOM element\n   */\n  mouseoverEdge(d, edge) {\n    d3.select(edge)\n      .style('stroke', networkDisplay.edgeHighlightColor)\n      .raise();\n  }\n\n  /**\n   *\n   * @param {*} d\n   * @param {*} edge\n   */\n  mouseoutEdge(d, edge) {\n    const { edgeColor } = this.props;\n    d3.select(edge).style('stroke', edgeColor(d));\n  }\n\n  /**\n   *\n   */\n  setup() {\n    const cRoot = d3.select(this.root);\n\n    this.tooltip = floatingTooltip('tooltip');\n\n    this.g = cRoot.append('g');\n    const g = this.g;\n\n    this.edgesG = g.append('g').attr('class', 'edges');\n\n    this.nodesG = g.append('g').attr('class', 'nodes');\n\n    this.titlesG = g.append('g').attr('class', 'titles');\n\n    this.showEdges = true;\n\n    function zoomed() {\n      g.attr('transform', d3.event.transform);\n    }\n\n    this.zoom = d3\n      .zoom()\n      .scaleExtent([1 / 20, 8])\n      .on('zoom', zoomed);\n\n    cRoot.call(this.zoom).on('dblclick.zoom', null);\n\n    this.restartLayout();\n    this.update();\n  }\n\n  /**\n   * Restart the layout\n   */\n  restartLayout() {\n    const { layout, nodes, edges } = this.props;\n\n    layout.onTicked(this.ticked);\n    layout.onEnded(this.ended);\n\n    layout.restart(nodes, edges);\n  }\n\n  /**\n   * Exit Layout\n   */\n  exitLayout() {\n    const { layout } = this.props;\n    layout.exit(this.underG, this.overG);\n  }\n\n  /**\n   * Update SVG Edges on tick\n   */\n  tickedEdges() {\n    if (this.showEdges) {\n      this.edgesG.selectAll('.edge').attr('d', d => {\n        // const targetSize = this.sizeNode(d.target);\n        // const sourceSize = this.sizeNode(d.source);\n        // const edgeSize = this.sizeEdge(d);\n        return edgeArrow(d, 2, 2, 2);\n      });\n    } else {\n      this.edgesG.selectAll('.edge').attr('d', () => '');\n    }\n  }\n\n  /**\n   * Update SVG Nodes on tick\n   */\n  tickedNodes() {\n    this.nodesG.selectAll('.node').attr('transform', d => `translate(${d.x},${d.y})`);\n  }\n\n  /**\n   * Update SVG Titles on tick\n   */\n  tickedTitles() {\n    this.titlesG.selectAll('.title').attr('transform', d => `translate(${d.x},${d.y})`);\n  }\n\n  /*\n   * Callback executed after ever tick of the simulation\n   */\n  ticked() {\n    this.tickedNodes();\n    this.tickedEdges();\n    this.tickedTitles();\n  }\n\n  /*\n   * Called when simulation finishes\n   */\n  ended() {\n    this.showEdges = true;\n  }\n\n  /**\n   *\n   */\n  update() {\n    const { padding } = this.props;\n    this.g.attr('transform', `translate(${padding.left} ${padding.top})`);\n\n    this.updateLayout();\n    this.updateNodes();\n    this.updateEdges();\n  }\n\n  /**\n   * Update layout with props and a place to render new content if need be.\n   */\n  updateLayout() {\n    const { layout } = this.props;\n    layout.render(this.props, this.underG, this.overG);\n  }\n\n  /**\n   * Update display of nodes\n   */\n  updateNodes() {\n    const { nodes, nodeColor } = this.props;\n\n    let node = this.nodesG.selectAll('.node').data(nodes, d => d.id);\n\n    const nodeE = node\n      .enter()\n      .append('g')\n      .classed('node', true)\n      .call(\n        d3\n          .drag()\n          .on('start', this.dragStarted)\n          .on('drag', this.dragged)\n          .on('end', this.dragEnded),\n      );\n    nodeE.append('circle').classed('node-circle', true);\n\n    // NOTE: Don't have the exit below the merge\n    // if you plan on reusing the `node` variable!!!\n    node.exit().remove();\n    node = node.merge(nodeE);\n\n    node\n      .select('.node-circle')\n      .attr('r', 5)\n      .attr('fill', d => nodeColor(d));\n\n    node.attr('transform', d => (d.x ? `translate(${d.x}, ${d.y})` : null));\n  }\n\n  /**\n   * Update display of edges\n   */\n  updateEdges() {\n    const { edges, edgeColor } = this.props;\n\n    let edge = this.edgesG.selectAll('.edge').data(edges, d => d.id);\n\n    const edgeE = edge\n      .enter()\n      .append('path')\n      .classed('edge', true);\n\n    edge.exit().remove();\n\n    const that = this;\n    edge = edge\n      .merge(edgeE)\n      .on('mouseover', function edgeOver(d) {\n        that.mouseoverEdge(d, this);\n      })\n      .on('mouseout', function edgeOver(d) {\n        that.mouseoutEdge(d, this);\n      });\n    edge.style('stroke', d => edgeColor(d)).style('stroke-width', 2);\n  }\n\n  /**\n   *\n   */\n  render() {\n    const { height, width } = this.props;\n\n    return (\n      <div>\n        <svg\n          className=\"Network chart\"\n          height={height}\n          ref={node => {\n            this.root = node;\n          }}\n          width={width}\n        />\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  addComputedProps(chartProps),\n  addComputedProps(layoutProps),\n)(Network);\n","import * as d3 from 'd3';\nimport './tooltip.scss';\n\n/**\n * Format an object into a table for tooltip output.\n *\n * @param {Object} entries Object of items to display as a tooltip table.\n * @param {Object} config Configuration object that modifies the table generation.\n *  Possible values are:\n *  title: optional title for table\n *  keys: if provided, only display data from entries associated with these keys.\n *    This also can be used to specify the order of the data in the table.\n *    If not provided, all keys from `entries` are displayed.\n *  keyFormat: formatting function that takes a key and outputs a string to be displayed.\n *  valueFormat: formatting function that takes a value and outputs a string to be displayed.\n */\nexport function tableContent(entries, config = {}) {\n  const defaultConfig = { title: null, keys: null, keyFormat: k => k, valueFormat: v => v };\n  config = { ...defaultConfig, ...config };\n  config.keys = config.keys || Object.keys(entries);\n  let output = '<div>';\n  if (config.title) {\n    output += `<h2>${config.title}</h2>`;\n  }\n  output += '<table><tbody>';\n  const rows = config.keys.map(k => {\n    if (k in entries) {\n      return `<tr><td>${config.keyFormat(k)}</td><td>${config.valueFormat(entries[k])}</td></tr>`;\n    }\n    return '';\n  });\n  output += rows.join('');\n  output += '</tbody></table></div>';\n  return output;\n}\n\n/**\n * Format an object into a series of spans for tooltip output.\n *\n * @param {Object} entries\n * @param {Function} keyFormat\n */\nexport function spanContent(entries) {\n  const content = Object.keys(entries).map(k => {\n    return `<span class='name'>${k}: </span><span class='value'>${entries[k]}</span>`;\n  });\n\n  return content.join('<br/>');\n}\n\n/*\n * Creates tooltip with provided id that\n * floats on top of visualization.\n * Most styling is expected to come from CSS\n * so check out bubble_chart.scss for more details.\n */\nexport function floatingTooltip(tooltipId, width) {\n  // Local variable to hold tooltip div for\n  // manipulation in other functions.\n  var tt = d3\n    .select('body')\n    .append('div')\n    .attr('class', 'tooltip')\n    .attr('id', tooltipId)\n    .html('');\n\n  // Set a width if it is provided.\n  if (width) {\n    tt.style('width', width);\n  }\n\n  // Initially it is hidden.\n  hideTooltip();\n\n  /*\n   * Display tooltip with provided content.\n   *\n   * content is expected to be HTML string.\n   *\n   * event is d3.event for positioning.\n   */\n  function showTooltip(content, event) {\n    tt.style('opacity', 1.0)\n      .style('pointer-events', 'all')\n      .html(content);\n\n    updatePosition(event);\n  }\n\n  /*\n   * Hide the tooltip div.\n   */\n  function hideTooltip() {\n    tt.style('opacity', 0.0).style('pointer-events', 'none');\n  }\n\n  function toNum(str) {\n    return Number(str.replace(/[^\\d.-]/g, ''));\n  }\n\n  /*\n   * Figure out where to place the tooltip\n   * based on d3 mouse evenggt.\n   */\n  function updatePosition(event) {\n    var xOffset = 35;\n    var yOffset = -60;\n\n    var ttw = toNum(tt.style('width'));\n    var tth = toNum(tt.style('height'));\n\n    var wscrY = window.scrollY;\n    var wscrX = window.scrollX;\n\n    var curX = document.all ? event.clientX + wscrX : event.pageX;\n    var curY = document.all ? event.clientY + wscrY : event.pageY;\n    var ttleft =\n      curX - wscrX + xOffset * 2 + ttw > window.innerWidth ? curX - ttw - xOffset : curX + xOffset;\n\n    if (ttleft < wscrX + xOffset) {\n      ttleft = wscrX + xOffset;\n    }\n\n    var tttop =\n      curY - wscrY + yOffset * 2 + tth > window.innerHeight\n        ? curY - tth - yOffset * 2\n        : curY + yOffset;\n\n    if (tttop < wscrY + yOffset) {\n      tttop = curY + yOffset;\n    }\n\n    tt.style('top', tttop + 'px').style('left', ttleft + 'px');\n  }\n\n  return {\n    showTooltip: showTooltip,\n    hideTooltip: hideTooltip,\n    updatePosition: updatePosition,\n  };\n}\n","import React, { Component } from 'react';\n\nimport AutoWidth from '../AutoWidth/AutoWidth';\nimport Controls from '../Controls/Controls';\nimport SidebarPage from '../SidebarPage/SidebarPage';\nimport Network from '../NetworkView/Network';\n\nimport dataDefs from './dataDefs.json';\nimport controlsConfig from './controlsConfig.json';\n\nconst FAKE_GRAPH = {\n  nodes: [{ id: 'a' }, { id: 'b' }],\n  edges: [{ source: 'a', target: 'b' }],\n};\n\nclass App extends Component {\n  renderSidebar() {\n    return (\n      <Controls data={[]} dataDefs={dataDefs} controlsConfig={controlsConfig}>\n        <h2>Network Exploration</h2>\n      </Controls>\n    );\n  }\n  render() {\n    return (\n      <SidebarPage name=\"App\" sidebar={this.renderSidebar()}>\n        <h1>Network Exploration</h1>\n        <AutoWidth>\n          <Network graph={FAKE_GRAPH} />\n        </AutoWidth>\n      </SidebarPage>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, BrowserRouter as Router } from 'react-router-dom';\nimport { RouterToUrlQuery } from 'react-url-query';\n\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'react-select/dist/react-select.css';\nimport 'react-virtualized/styles.css';\nimport 'react-virtualized-select/styles.css';\nimport 'react-tippy/dist/tippy.css';\n\nReactDOM.render(\n  <Router>\n    <RouterToUrlQuery>\n      <Route component={App} />\n    </RouterToUrlQuery>\n  </Router>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}